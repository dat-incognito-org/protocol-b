{
  "address": "0x3534C0a523b3A862c06C8CAF61de230f9b408f51",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum MainStructs.Networks",
          "name": "_net",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_params",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "boltOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "boltRelayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "route",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        }
      ],
      "name": "Fulfill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum MainStructs.LockTypes",
          "name": "lockType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "routeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum MainStructs.SlashRules",
          "name": "rule",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "boltRelayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        }
      ],
      "name": "Slash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "boltRelayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "routes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "boltRelayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "route",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "boltRelayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "route",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURRENT_NETWORK",
      "outputs": [
        {
          "internalType": "enum MainStructs.Networks",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_FEE_RECIPIENT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_MESSAGE_PREFIX",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNLOCK_MESSAGE_PREFIX",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boltRelayerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "boltRelayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unstakeEnableBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "boltRelayerAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum MainStructs.Networks",
                  "name": "src",
                  "type": "uint8"
                },
                {
                  "internalType": "enum MainStructs.Networks",
                  "name": "dst",
                  "type": "uint8"
                }
              ],
              "internalType": "struct MainStructs.Route",
              "name": "route",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "crossAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                }
              ],
              "internalType": "struct MainStructs.ExecutableMessage",
              "name": "srcMsg",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                }
              ],
              "internalType": "struct MainStructs.ExecutableMessage",
              "name": "dstMsg",
              "type": "tuple"
            },
            {
              "internalType": "enum MainStructs.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.SwapData",
          "name": "s",
          "type": "tuple"
        }
      ],
      "name": "computeSwapID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "routeID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        },
        {
          "internalType": "enum MainStructs.LockTypes",
          "name": "lockType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "depositorUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "boltRelayerAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum MainStructs.Networks",
                  "name": "src",
                  "type": "uint8"
                },
                {
                  "internalType": "enum MainStructs.Networks",
                  "name": "dst",
                  "type": "uint8"
                }
              ],
              "internalType": "struct MainStructs.Route",
              "name": "route",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "crossAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                }
              ],
              "internalType": "struct MainStructs.ExecutableMessage",
              "name": "srcMsg",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                }
              ],
              "internalType": "struct MainStructs.ExecutableMessage",
              "name": "dstMsg",
              "type": "tuple"
            },
            {
              "internalType": "enum MainStructs.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.SwapData",
          "name": "s",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "boltOperator",
          "type": "address"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "boltRelayerAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum MainStructs.Networks",
                  "name": "src",
                  "type": "uint8"
                },
                {
                  "internalType": "enum MainStructs.Networks",
                  "name": "dst",
                  "type": "uint8"
                }
              ],
              "internalType": "struct MainStructs.Route",
              "name": "route",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "crossAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                }
              ],
              "internalType": "struct MainStructs.ExecutableMessage",
              "name": "srcMsg",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                }
              ],
              "internalType": "struct MainStructs.ExecutableMessage",
              "name": "dstMsg",
              "type": "tuple"
            },
            {
              "internalType": "enum MainStructs.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.SwapData",
          "name": "s",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "boltOperator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "boltRelayerAddr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfillAndRelay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fulfills",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "boltOperator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MainStructs.Networks",
              "name": "src",
              "type": "uint8"
            },
            {
              "internalType": "enum MainStructs.Networks",
              "name": "dst",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.Route",
          "name": "route",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getAvailableRelayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayerAddr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum MainStructs.Networks",
              "name": "src",
              "type": "uint8"
            },
            {
              "internalType": "enum MainStructs.Networks",
              "name": "dst",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.Route",
          "name": "route",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getAvailableStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "crossAmount",
          "type": "uint256"
        }
      ],
      "name": "getLockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MainStructs.Networks",
              "name": "src",
              "type": "uint8"
            },
            {
              "internalType": "enum MainStructs.Networks",
              "name": "dst",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.Route",
          "name": "r",
          "type": "tuple"
        }
      ],
      "name": "getRouteID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "srcAmount",
          "type": "uint256"
        }
      ],
      "name": "getSwapFees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lockedFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "internalType": "contract IParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "boltOperator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "boltRelayerAddr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "relay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "boltOperator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "boltRelayerAddr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "relayReturn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MainStructs.SlashRules",
          "name": "rule",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "boltRelayerAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum MainStructs.Networks",
                  "name": "src",
                  "type": "uint8"
                },
                {
                  "internalType": "enum MainStructs.Networks",
                  "name": "dst",
                  "type": "uint8"
                }
              ],
              "internalType": "struct MainStructs.Route",
              "name": "route",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "crossAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                }
              ],
              "internalType": "struct MainStructs.ExecutableMessage",
              "name": "srcMsg",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                }
              ],
              "internalType": "struct MainStructs.ExecutableMessage",
              "name": "dstMsg",
              "type": "tuple"
            },
            {
              "internalType": "enum MainStructs.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.SwapData",
          "name": "s",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "boltOperator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "boltRelayerAddr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MainStructs.Networks",
              "name": "src",
              "type": "uint8"
            },
            {
              "internalType": "enum MainStructs.Networks",
              "name": "dst",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "boltRelayerAddr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum MainStructs.Networks",
              "name": "src",
              "type": "uint8"
            },
            {
              "internalType": "enum MainStructs.Networks",
              "name": "dst",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.Route",
          "name": "route",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct MainStructs.ExecutableMessage",
          "name": "srcMsg",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct MainStructs.ExecutableMessage",
          "name": "dstMsg",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "swaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "boltRelayerAddr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum MainStructs.Networks",
              "name": "src",
              "type": "uint8"
            },
            {
              "internalType": "enum MainStructs.Networks",
              "name": "dst",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.Route",
          "name": "route",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "crossAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct MainStructs.ExecutableMessage",
          "name": "srcMsg",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct MainStructs.ExecutableMessage",
          "name": "dstMsg",
          "type": "tuple"
        },
        {
          "internalType": "enum MainStructs.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testMarshal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "routeID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "swapID",
          "type": "bytes32"
        },
        {
          "internalType": "enum MainStructs.LockTypes",
          "name": "lockType",
          "type": "uint8"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MainStructs.Networks",
              "name": "src",
              "type": "uint8"
            },
            {
              "internalType": "enum MainStructs.Networks",
              "name": "dst",
              "type": "uint8"
            }
          ],
          "internalType": "struct MainStructs.Route",
          "name": "route",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0461b368090983783a33a7c20a28723bc1e1f977daf05cf396a42e38b0be9bf5",
  "receipt": {
    "to": null,
    "from": "0xb5A581c6EA895fBfD0d7529ac04e24Bf12804c2d",
    "contractAddress": "0x3534C0a523b3A862c06C8CAF61de230f9b408f51",
    "transactionIndex": 18,
    "gasUsed": "4873777",
    "logsBloom": "0x
    "blockHash": "0xcf5bb07dd48ac943a3ba6ed3eb2003c2c0d3f01390543c4eaa90e283febdedaa",
    "transactionHash": "0x0461b368090983783a33a7c20a28723bc1e1f977daf05cf396a42e38b0be9bf5",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 28732414,
        "transactionHash": "0x0461b368090983783a33a7c20a28723bc1e1f977daf05cf396a42e38b0be9bf5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b5a581c6ea895fbfd0d7529ac04e24bf12804c2d",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000019feabf3aef2830000000000000000000000000000000000000000000000000ba89cb544ee2a9700000000000000000000000000000000000000000000083392f355f6ae8749a30000000000000000000000000000000000000000000000000b8e9e09513f3814000000000000000000000000000000000000000000000833930d54a2a2363c26",
        "logIndex": 80,
        "blockHash": "0xcf5bb07dd48ac943a3ba6ed3eb2003c2c0d3f01390543c4eaa90e283febdedaa"
      }
    ],
    "blockNumber": 28732414,
    "cumulativeGasUsed": "11135267",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0xc4619705d9c9Ee07860e0A5247d0f7Cb5980Fade",
    "0x0000000000000000000000000000000000001001"
  ],
  "numDeployments": 1,
  "solcInputHash": "7ac7ff0f0d656c56390833f9eb782840",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"_net\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_params\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boltOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boltRelayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"}],\"name\":\"Fulfill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MainStructs.LockTypes\",\"name\":\"lockType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MainStructs.SlashRules\",\"name\":\"rule\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boltRelayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"}],\"name\":\"Slash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boltRelayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boltRelayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boltRelayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURRENT_NETWORK\",\"outputs\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE_RECIPIENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_MESSAGE_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_MESSAGE_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boltRelayerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boltRelayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeEnableBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"crossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"srcMsg\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"dstMsg\",\"type\":\"tuple\"},{\"internalType\":\"enum MainStructs.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.SwapData\",\"name\":\"s\",\"type\":\"tuple\"}],\"name\":\"computeSwapID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"internalType\":\"enum MainStructs.LockTypes\",\"name\":\"lockType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"depositorUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"crossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"srcMsg\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"dstMsg\",\"type\":\"tuple\"},{\"internalType\":\"enum MainStructs.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.SwapData\",\"name\":\"s\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"boltOperator\",\"type\":\"address\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"crossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"srcMsg\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"dstMsg\",\"type\":\"tuple\"},{\"internalType\":\"enum MainStructs.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.SwapData\",\"name\":\"s\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"boltOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfillAndRelay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fulfills\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"boltOperator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAvailableRelayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAvailableStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crossAmount\",\"type\":\"uint256\"}],\"name\":\"getLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"r\",\"type\":\"tuple\"}],\"name\":\"getRouteID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"}],\"name\":\"getSwapFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"contract IParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"boltOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"boltOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"relayReturn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MainStructs.SlashRules\",\"name\":\"rule\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"crossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"srcMsg\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"dstMsg\",\"type\":\"tuple\"},{\"internalType\":\"enum MainStructs.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.SwapData\",\"name\":\"s\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"boltOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"srcMsg\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"dstMsg\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boltRelayerAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"crossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"srcMsg\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct MainStructs.ExecutableMessage\",\"name\":\"dstMsg\",\"type\":\"tuple\"},{\"internalType\":\"enum MainStructs.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMarshal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"internalType\":\"enum MainStructs.LockTypes\",\"name\":\"lockType\",\"type\":\"uint8\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"src\",\"type\":\"uint8\"},{\"internalType\":\"enum MainStructs.Networks\",\"name\":\"dst\",\"type\":\"uint8\"}],\"internalType\":\"struct MainStructs.Route\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"stake((uint8,uint8)[],uint256[],address)\":{\"params\":{\"amounts\":\"The amount to stake for each route\",\"routes\":\"Routes to stake funds to e.g. [(ETH, PLG), (ETH, AVAX)]\",\"token\":\"The token to stake (zero for native coin)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"stake((uint8,uint8)[],uint256[],address)\":{\"notice\":\"Any relayer can add stake to take swap requests & earn fees;the stake is bound to one route, which consist of source & destination networks (stake amounts must be identical)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MainTesting.sol\":\"MainTestDst\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IMain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\"; // for test fixtures\\nimport \\\"./MainStructs.sol\\\";\\n\\ninterface IMain {\\n    function stake(\\n        MainStructs.Route[] memory routes,\\n        uint[] memory amount,\\n        address token\\n    ) external payable;\\n\\n    function unstake(\\n        MainStructs.Route memory r,\\n        uint amount,\\n        address token\\n    ) external;\\n\\n    function swap(\\n        uint amount,\\n        address boltRelayer,\\n        MainStructs.Route memory route,\\n        MainStructs.ExecutableMessage calldata srcMsg,\\n        MainStructs.ExecutableMessage calldata dstMsg\\n    ) external payable;\\n\\n    function fulfill(MainStructs.SwapData calldata s, address boltOperator)\\n        external\\n        payable;\\n\\n    function relay(\\n        bytes32 swapID,\\n        address boltOperator,\\n        address boltRelayerAddr,\\n        bytes calldata signature\\n    ) external;\\n\\n    function relayReturn(\\n        bytes32 swapID,\\n        address boltOperator,\\n        address boltRelayerAddr,\\n        bytes calldata signature\\n    ) external;\\n\\n    function slash(\\n        MainStructs.SlashRules rule,\\n        MainStructs.SwapData calldata s,\\n        address boltOperator,\\n        address boltRelayerAddr,\\n        bytes calldata signature\\n    ) external;\\n\\n    function getAvailableRelayers(\\n        MainStructs.Route memory route,\\n        uint amount,\\n        address token\\n    ) external view returns (address[] memory);\\n\\n    event Stake(\\n        address boltRelayer,\\n        uint[] routes,\\n        uint[] amount,\\n        address token\\n    );\\n    event Unstake(\\n        address boltRelayer,\\n        uint route,\\n        uint amount,\\n        address token,\\n        uint unlockTime\\n    );\\n    event Swap(\\n        address requester,\\n        address boltRelayer,\\n        uint route,\\n        bytes32 swapID\\n    );\\n    event Fulfill(\\n        address boltOperator,\\n        address boltRelayer,\\n        uint route,\\n        bytes32 swapID\\n    );\\n    event Lock(\\n        MainStructs.LockTypes lockType,\\n        uint amount,\\n        uint nonce,\\n        uint routeID,\\n        address token,\\n        address depositor,\\n        address receiver,\\n        bytes32 swapID\\n    );\\n    event Slash(\\n        MainStructs.SlashRules rule,\\n        uint amount,\\n        address token,\\n        address boltRelayerAddress,\\n        bytes32 swapID\\n    );\\n}\\n\",\"keccak256\":\"0x2f4883066b8653a1fce82454ba253e46d068f9c8d4c7aadcaf478a862353068c\",\"license\":\"MIT\"},\"contracts/IParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IParameters {\\n    function lockDuration() external view returns (uint);\\n    function durationToUnstake() external view returns (uint);\\n    function durationToFirstUnstake() external view returns (uint);\\n    function BASE_PRECISION() external view returns (uint);\\n    function minFee(uint) external view returns (uint);\\n    function feePercent(uint) external view returns (uint);\\n    function overCollateralPercent(uint) external view returns (uint);\\n}\",\"keccak256\":\"0xfac6946974c652f6cd5dba677335c0fb345e6729b091eee67bf02ca669e9d67a\",\"license\":\"MIT\"},\"contracts/Main.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IMain.sol\\\";\\nimport \\\"./IParameters.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title Main logic contract for Bolt Protocol\\ncontract Main is IMain, MainStructs {\\n    using Counters for Counters.Counter;\\n    string public constant UNLOCK_MESSAGE_PREFIX =\\n        \\\"\\\\x19Bolt Signed Unlock Message:\\\\n32\\\";\\n    string public constant RELAY_MESSAGE_PREFIX =\\n        \\\"\\\\x19Bolt Signed Relay Message:\\\\n64\\\";\\n    Networks public immutable CURRENT_NETWORK;\\n    address public constant NATIVE_TOKEN_ADDRESS =\\n        0x0000000000000000000000000000000000000000;\\n    IParameters public immutable params;\\n    address public immutable PROTOCOL_FEE_RECIPIENT;\\n\\n    mapping(address => BoltRelayer) public boltRelayers;\\n    address[] public boltRelayerAddresses;\\n    Counters.Counter private swapCounter;\\n    mapping(bytes32 => SwapData) public swaps;\\n    mapping(bytes32 => FulfillData) public fulfills; // TODO: after they finalize, move swaps & fulfills entries to \\\"completed\\\" mapping to free up storage\\n\\n    mapping(bytes32 => uint) public lockedFunds;\\n\\n    constructor(\\n        Networks _net,\\n        address _params,\\n        address _feeRecipient\\n    ) {\\n        CURRENT_NETWORK = _net;\\n        params = IParameters(_params);\\n        PROTOCOL_FEE_RECIPIENT = _feeRecipient;\\n    }\\n\\n    /// @notice Any relayer can add stake to take swap requests & earn fees;\\n    /// @notice the stake is bound to one route, which consist of source & destination networks (stake amounts must be identical)\\n    /// @param routes Routes to stake funds to e.g. [(ETH, PLG), (ETH, AVAX)]\\n    /// @param amounts The amount to stake for each route\\n    /// @param token The token to stake (zero for native coin)\\n    function stake(\\n        Route[] memory routes,\\n        uint[] memory amounts,\\n        address token\\n    ) external payable validRoutes(routes) {\\n        uint totalAmount = 0;\\n        BoltRelayer storage r = boltRelayers[msg.sender];\\n        uint[] memory routeIds = new uint[](routes.length);\\n        for (uint i = 0; i < routes.length; i++) {\\n            routeIds[i] = getRouteID(routes[i]);\\n            StakedFunds storage sf = boltRelayers[msg.sender].stakesByRoute[\\n                routeIds[i]\\n            ];\\n            sf.stakeByToken[token] += amounts[i];\\n            totalAmount += amounts[i];\\n        }\\n        if (token == NATIVE_TOKEN_ADDRESS) {\\n            require(totalAmount == msg.value, \\\"stake native amount invalid\\\");\\n        } else {\\n            TransferHelper.safeTransferFrom(\\n                token,\\n                msg.sender,\\n                address(this),\\n                totalAmount\\n            );\\n        }\\n        if (r.unstakeEnableBlock == 0) {\\n            // new relayer\\n            r.unstakeEnableBlock =\\n                block.number +\\n                params.durationToFirstUnstake();\\n            boltRelayerAddresses.push(msg.sender);\\n        }\\n\\n        emit Stake(msg.sender, routeIds, amounts, token);\\n    }\\n\\n    function unstake(\\n        Route memory route,\\n        uint amount,\\n        address token\\n    ) external {\\n        BoltRelayer storage r = boltRelayers[msg.sender];\\n        StakedFunds storage sf = r.stakesByRoute[getRouteID(route)];\\n        uint stakedAmount = sf.stakeByToken[token];\\n        uint lockedAmount = sf.totalLockedByToken[token];\\n        require(\\n            block.number >= r.unstakeEnableBlock,\\n            \\\"first unstake time not met\\\"\\n        );\\n        require(stakedAmount > 0 && stakedAmount > lockedAmount, \\\"unstake zero\\\");\\n        require(amount <= stakedAmount - lockedAmount, \\\"unstake exceeds amount\\\");\\n\\n        swapCounter.increment();\\n        uint unlockTime = _lockStake(\\n            amount,\\n            swapCounter.current(),\\n            getRouteID(route),\\n            token,\\n            address(0), // must always wait full unstake duration\\n            msg.sender,\\n            bytes32(0),\\n            LockTypes.UNSTAKE\\n        );\\n        emit Unstake(msg.sender, getRouteID(route), amount, token, unlockTime);\\n    }\\n\\n    function _getStakedFunds(\\n        address relayerAddr,\\n        Route memory route,\\n        address token\\n    ) internal view returns (uint) {\\n        BoltRelayer storage r = boltRelayers[relayerAddr];\\n        return r.stakesByRoute[getRouteID(route)].stakeByToken[token];\\n    }\\n\\n    function getRouteID(Route memory r) public pure returns (uint) {\\n        return uint(r.src) * 256 + uint(r.dst);\\n    }\\n\\n    modifier validRoutes(Route[] memory rs) {\\n        for (uint i = 0; i < rs.length; i++) {\\n            require(rs[i].src != rs[i].dst, \\\"ROUTE invalid\\\");\\n            require(\\n                rs[i].src == CURRENT_NETWORK || rs[i].dst == CURRENT_NETWORK,\\n                \\\"route must contain current net\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier validSrc(Route memory r) {\\n        require(r.src != r.dst, \\\"ROUTE invalid\\\");\\n        require(r.src == CURRENT_NETWORK, \\\"SRC invalid\\\");\\n        _;\\n    }\\n\\n    modifier validDst(Route memory r) {\\n        require(r.src != r.dst, \\\"ROUTE invalid\\\");\\n        require(r.dst == CURRENT_NETWORK, \\\"DST invalid\\\");\\n        _;\\n    }\\n\\n    function swap(\\n        uint amount,\\n        address boltRelayerAddr,\\n        Route memory route,\\n        ExecutableMessage calldata srcMsg,\\n        ExecutableMessage calldata dstMsg\\n    ) external payable {\\n        SwapData memory newSwapData;\\n        uint lockAmount;\\n        {\\n            require(route.src == CURRENT_NETWORK, \\\"swap srcNetwork invalid\\\");\\n            (address returnToken, uint returnAmt) = _executeSrcMsg(\\n                amount,\\n                srcMsg\\n            );\\n            require(\\n                returnToken == srcMsg.tokenOut,\\n                \\\"swap srcMsg tokenOut mismatch\\\"\\n            );\\n\\n            uint availableStake = getAvailableStake(\\n                boltRelayerAddr,\\n                route,\\n                srcMsg.tokenOut\\n            );\\n            (uint[] memory fees, uint crossAmount) = getSwapFees(returnAmt);\\n            uint totalFees;\\n            for (uint i = 0; i < fees.length; i++) {\\n                totalFees += fees[i];\\n            }\\n            lockAmount = getLockAmount(crossAmount);\\n            require(\\n                availableStake >= lockAmount,\\n                \\\"swap: relayer insufficient stake\\\"\\n            );\\n\\n            swapCounter.increment();\\n            // store new swap data\\n            newSwapData = SwapData(\\n                swapCounter.current(),\\n                msg.sender,\\n                boltRelayerAddr,\\n                route,\\n                crossAmount,\\n                totalFees,\\n                srcMsg,\\n                dstMsg,\\n                Status.WAITING\\n            );\\n        }\\n        bytes32 h = computeSwapID(newSwapData);\\n        _lockStake(\\n            lockAmount,\\n            newSwapData.nonce,\\n            getRouteID(newSwapData.route),\\n            srcMsg.tokenOut,\\n            newSwapData.requester,\\n            boltRelayerAddr,\\n            h,\\n            LockTypes.SWAP_LOCK\\n        );\\n        swaps[h] = newSwapData;\\n        emit Swap(msg.sender, boltRelayerAddr, getRouteID(route), h);\\n    }\\n\\n    function computeSwapID(SwapData memory s) public pure returns (bytes32) {\\n        // require(s.status == Status.WAITING, \\\"swap status invalid for hashing\\\");\\n        (bytes32 temp1, bytes32 temp2) = (getMsgHash(s.srcMsg), getMsgHash(s.dstMsg));\\n        temp1 = keccak256(abi.encodePacked(temp1, temp2));\\n        bytes memory content = abi.encodePacked(s.nonce, s.requester, s.boltRelayerAddr, getRouteID(s.route), s.crossAmount, s.totalFees, temp1); // TODO: non-EVM-specific marshalling\\n        return keccak256(content);\\n    }\\n\\n    function getMsgHash(ExecutableMessage memory m) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(m.tokenIn, m.tokenOut, m.callAddress, m.callData));\\n    }\\n\\n    function _lockStake(\\n        uint amount,\\n        uint nonce,\\n        uint routeID,\\n        address token,\\n        address depositor,\\n        address raddr,\\n        bytes32 h,\\n        LockTypes ltype\\n    ) internal returns (uint unlockTime) {\\n        if (ltype == LockTypes.UNSTAKE) {\\n            unlockTime = block.number + params.durationToUnstake();\\n        } else if (ltype == LockTypes.SWAP_LOCK) {\\n            unlockTime = block.number + params.lockDuration();\\n            StakedFunds storage stakes = boltRelayers[raddr].stakesByRoute[\\n                routeID\\n            ];\\n            uint newTotalLocked = stakes.totalLockedByToken[token] + amount;\\n            require(\\n                newTotalLocked <=\\n                    boltRelayers[raddr].stakesByRoute[routeID].stakeByToken[\\n                        token\\n                    ],\\n                \\\"lock exceeds stake amount\\\"\\n            );\\n            stakes.totalLockedByToken[token] = newTotalLocked;\\n        } else if (ltype == LockTypes.PENDING_REWARD) {\\n            unlockTime = block.number + params.lockDuration();\\n        } else {\\n            revert(\\\"invalid stake lock type\\\");\\n        }\\n\\n        bytes32 mapkey = keccak256(\\n            abi.encodePacked(\\n                amount,\\n                nonce,\\n                routeID,\\n                token,\\n                depositor,\\n                raddr,\\n                h,\\n                ltype\\n            )\\n        );\\n\\n        lockedFunds[mapkey] = unlockTime;\\n        emit Lock(ltype, amount, nonce, routeID,\\n                token,\\n                depositor,\\n                raddr,\\n                h);\\n        return unlockTime;\\n    }\\n\\n    function unlock(\\n        uint amount,\\n        uint nonce,\\n        uint routeID,\\n        address token,\\n        address depositor,\\n        address receiver,\\n        bytes32 swapID,\\n        LockTypes lockType\\n    ) external {\\n        _unlock(\\n            amount,\\n            nonce,\\n            routeID,\\n            token,\\n            depositor,\\n            receiver,\\n            swapID,\\n            lockType,\\n            bytes(\\\"\\\")\\n        );\\n    }\\n\\n    function depositorUnlock(\\n        uint amount,\\n        uint nonce,\\n        uint routeID,\\n        address token,\\n        address depositor,\\n        address receiver,\\n        bytes32 swapID,\\n        LockTypes lockType,\\n        bytes memory signature\\n    ) external {\\n        _unlock(\\n            amount,\\n            nonce,\\n            routeID,\\n            token,\\n            depositor,\\n            receiver,\\n            swapID,\\n            lockType,\\n            signature\\n        );\\n    }\\n\\n    function _unlock(\\n        uint amount,\\n        uint nonce,\\n        uint routeID,\\n        address token,\\n        address depositor,\\n        address receiver,\\n        bytes32 swapID,\\n        LockTypes lockType,\\n        bytes memory signature\\n    ) internal {\\n        bytes32 mapkey = keccak256(\\n            abi.encodePacked(\\n                amount,\\n                nonce,\\n                routeID,\\n                token,\\n                depositor,\\n                receiver,\\n                swapID,\\n                lockType\\n            )\\n        );\\n        uint unlockTime = lockedFunds[mapkey];\\n        require(amount > 0 && unlockTime > 0, \\\"no locked funds\\\");\\n        if (depositor != address(0) && signature.length > 0) {\\n            // unlock by depositor signature\\n            bytes32 signedContent = keccak256(\\n                abi.encodePacked(UNLOCK_MESSAGE_PREFIX, swapID)\\n            );\\n            address recoveredAddress = ECDSA.recover(signedContent, signature);\\n            require(recoveredAddress == depositor, \\\"relay signature invalid\\\");\\n        } else {\\n            require(block.number >= unlockTime, \\\"unlock time not met\\\");\\n        }\\n\\n        delete (lockedFunds[mapkey]);\\n        // transfer\\n        if (lockType == LockTypes.UNSTAKE || lockType == LockTypes.SWAP_LOCK) {\\n            if (token == NATIVE_TOKEN_ADDRESS) {\\n                TransferHelper.safeTransferETH(receiver, amount);\\n            } else {\\n                TransferHelper.safeTransfer(token, receiver, amount);\\n            }\\n        } else if (lockType == LockTypes.SWAP_LOCK) {\\n            uint totalLocked = boltRelayers[receiver]\\n                .stakesByRoute[routeID]\\n                .totalLockedByToken[token];\\n            require(totalLocked > amount, \\\"invalid total locked amount\\\");\\n            boltRelayers[receiver].stakesByRoute[routeID].totalLockedByToken[\\n                token\\n            ] = totalLocked - amount;\\n        }\\n    }\\n\\n    function _updateLock(bytes32 _oldKey, bytes32 _newKey) internal {\\n        uint amount = lockedFunds[_oldKey];\\n        delete (lockedFunds[_oldKey]);\\n        lockedFunds[_newKey] = amount;\\n    }\\n\\n    function _executeSrcMsg(uint amount, ExecutableMessage memory srcMsg)\\n        internal\\n        returns (address, uint)\\n    {\\n        if (srcMsg.callData.length == 0) {\\n            // blank msg\\n            require(\\n                srcMsg.tokenIn == srcMsg.tokenOut &&\\n                    srcMsg.callAddress == address(0),\\n                \\\"srcMsg (blank) invalid\\\"\\n            );\\n            if (srcMsg.tokenIn == NATIVE_TOKEN_ADDRESS) {\\n                require(amount == msg.value, \\\"swap native amount invalid\\\");\\n            } else {\\n                TransferHelper.safeTransferFrom(\\n                    srcMsg.tokenIn,\\n                    msg.sender,\\n                    address(this),\\n                    amount\\n                );\\n            }\\n            return (srcMsg.tokenIn, amount);\\n        }\\n        // TODO\\n        return (srcMsg.tokenIn, amount);\\n    }\\n\\n    function _executeDstMsg(uint crossAmount, ExecutableMessage memory dstMsg)\\n        internal\\n        returns (address, uint)\\n    {\\n        if (dstMsg.callData.length == 0) {\\n            // blank msg\\n            require(\\n                dstMsg.tokenIn == dstMsg.tokenOut,\\n                \\\"dstMsg (blank) invalid\\\"\\n            );\\n            if (dstMsg.tokenIn == NATIVE_TOKEN_ADDRESS) {\\n                TransferHelper.safeTransferETH(dstMsg.callAddress, crossAmount);\\n            } else {\\n                TransferHelper.safeTransfer(\\n                    dstMsg.tokenIn,\\n                    dstMsg.callAddress,\\n                    crossAmount\\n                );\\n            }\\n            return (dstMsg.tokenIn, crossAmount);\\n        }\\n        // TODO\\n        return (dstMsg.tokenIn, crossAmount);\\n    }\\n\\n    // TBD: internal\\n    function getSwapFees(uint srcAmount)\\n        public\\n        view\\n        returns (uint[] memory, uint)\\n    {\\n        require(uint(BoltActors.RELAYER) == 0, \\\"fee params invalid\\\");\\n        uint bp = params.BASE_PRECISION();\\n        uint feeActorsLen = uint(BoltActors.OPERATOR) + 1;\\n        uint[] memory fees = new uint[](feeActorsLen);\\n        uint crossAmount = srcAmount;\\n        for (uint i = 0; i < feeActorsLen; i++) {\\n            uint fee = (srcAmount * params.feePercent(i)) / bp;\\n            if (fee < params.minFee(i)) fee = params.minFee(i);\\n            fees[i] = fee;\\n            crossAmount -= fee;\\n        }\\n        return (fees, crossAmount);\\n    }\\n\\n    // TBD: internal\\n    function getLockAmount(uint crossAmount) public view returns (uint) {\\n        uint x1 = params.overCollateralPercent(uint(SlashRules.RULE2));\\n        uint bp = params.BASE_PRECISION();\\n        return (crossAmount * (bp + x1)) / bp;\\n    }\\n\\n    function getAvailableStake(\\n        address relayerAddr,\\n        Route memory route,\\n        address token\\n    ) public view returns (uint) {\\n        StakedFunds storage sf = boltRelayers[relayerAddr].stakesByRoute[\\n            getRouteID(route)\\n        ];\\n        uint l = sf.totalLockedByToken[token];\\n        uint s = sf.stakeByToken[token];\\n        require(l <= s, \\\"invalid stake & locked amounts\\\");\\n        return s - l;\\n    }\\n\\n    function testMarshal() public pure returns (uint) {\\n        Route memory r;\\n        return abi.encodePacked(r.src, r.dst).length;\\n    }\\n\\n    function getAvailableRelayers(\\n        Route memory route,\\n        uint amount,\\n        address token\\n    ) public view returns (address[] memory) {\\n        address[] memory temp = new address[](boltRelayerAddresses.length);\\n        uint resultLen = 0;\\n        for (uint i = 0; i < boltRelayerAddresses.length; i++) {\\n            uint stk = getAvailableStake(boltRelayerAddresses[i], route, token);\\n            if (stk >= amount) {\\n                temp[resultLen] = temp[i];\\n                resultLen++;\\n            }\\n        }\\n        address[] memory result = new address[](resultLen);\\n        for (uint i = 0; i < resultLen; i++) {\\n            result[i] = temp[i];\\n        }\\n\\n        return result;\\n    }\\n\\n    function fulfill(SwapData calldata s, address boltOperator)\\n        external\\n        payable\\n    {\\n        (bytes32 h, FulfillData memory f) = _fulfill(s, boltOperator);\\n        FulfillData storage temp = fulfills[h];\\n        require(\\n            temp.boltOperator == address(0),\\n            \\\"fulfill already exists\\\"\\n        );\\n        fulfills[h] = f;\\n        swaps[h] = s;\\n    }\\n\\n    function _fulfill(SwapData calldata s, address boltOperator)\\n        internal\\n        returns (bytes32, FulfillData memory)\\n    {\\n        bytes32 h = computeSwapID(s);\\n        FulfillData memory fdata = FulfillData(h, block.number, boltOperator);\\n        require(\\n            s.route.dst == CURRENT_NETWORK,\\n            \\\"fulfill dstNetwork invalid\\\"\\n        );\\n        uint crossAmount = s.crossAmount;\\n        address crossToken = s.dstMsg.tokenIn;\\n        if (crossToken == NATIVE_TOKEN_ADDRESS) {\\n            require(crossAmount == msg.value, \\\"fulfill native amount invalid\\\");\\n        } else {\\n            TransferHelper.safeTransferFrom(\\n                crossToken,\\n                msg.sender,\\n                address(this),\\n                crossAmount\\n            );\\n        }\\n\\n        emit Fulfill(\\n            boltOperator,\\n            s.boltRelayerAddr,\\n            getRouteID(s.route),\\n            h\\n        );\\n        return (h, fdata);\\n    }\\n\\n    function relay(\\n        bytes32 swapID,\\n        address boltOperator,\\n        address boltRelayerAddr,\\n        bytes calldata signature\\n    ) external {\\n        FulfillData memory f = fulfills[swapID];\\n        _relay(f, boltOperator, boltRelayerAddr, signature);\\n    }\\n\\n    function fulfillAndRelay(\\n        SwapData calldata s,\\n        address boltOperator,\\n        address boltRelayerAddr,\\n        bytes calldata signature\\n    ) external payable {\\n        (bytes32 h, FulfillData memory f) = _fulfill(s, boltOperator);\\n        fulfills[h] = f; // unoptimized storage\\n        swaps[h] = s;\\n        _relay(f, boltOperator, boltRelayerAddr, signature);\\n    }\\n\\n    function _relay(\\n        FulfillData memory f,\\n        address boltOperator,\\n        address boltRelayerAddr,\\n        bytes calldata signature\\n    ) internal {\\n        SwapData memory swapData = swaps[f.swapID];\\n        // check f exists (and is non-zero)\\n        require(\\n            swapData.status != Status.INVALID && f.boltOperator != address(0),\\n            \\\"fulfill non-existent\\\"\\n        );\\n        // check operator address matches\\n        require(f.boltOperator == boltOperator, \\\"relay operatorAddr mismatch\\\");\\n        // check fulfillData not expired\\n        require(\\n            block.number < f.startBlock + params.lockDuration(),\\n            \\\"fulfill expired\\\"\\n        );\\n        // verify signature\\n        bytes32 signedContent = keccak256(\\n            abi.encodePacked(RELAY_MESSAGE_PREFIX, f.swapID, boltOperator)\\n        );\\n        address recoveredAddress = ECDSA.recover(signedContent, signature);\\n        require(recoveredAddress == boltRelayerAddr, \\\"relay signature invalid\\\");\\n        ExecutableMessage memory m = swapData.dstMsg;\\n        _executeDstMsg(swapData.crossAmount, m);\\n        _lockStake(\\n            getLockAmount(swapData.crossAmount),\\n            swapData.nonce,\\n            getRouteID(swapData.route),\\n            swapData.dstMsg.tokenIn,\\n            f.boltOperator,\\n            boltRelayerAddr,\\n            f.swapID,\\n            LockTypes.SWAP_LOCK\\n        );\\n    }\\n\\n    modifier checkSanitySwap(SwapData memory s) {\\n        require(s.status != Status.INVALID, \\\"swap status invalid\\\");\\n        require(\\n            s.requester != address(0) && s.boltRelayerAddr != address(0),\\n            \\\"swap u/r address invalid\\\"\\n        );\\n        _;\\n    }\\n\\n    function relayReturn(\\n        bytes32 swapID,\\n        address boltOperator,\\n        address boltRelayerAddr,\\n        bytes calldata signature\\n    ) external {\\n        SwapData storage s = swaps[swapID];\\n\\n        {\\n            // check s exists (and is non-zero)\\n            require(\\n                s.status != Status.INVALID &&\\n                    s.boltRelayerAddr != address(0) &&\\n                    s.requester != address(0),\\n                \\\"swap non-existent\\\"\\n            );\\n\\n            // if (boltRelayerAddr != msg.sender) { // TBD: relayer might also sign blocknum\\n            // }\\n            // verify signature\\n            bytes32 signedContent = keccak256(\\n                abi.encodePacked(RELAY_MESSAGE_PREFIX, swapID, boltOperator)\\n            );\\n            address recoveredAddress = ECDSA.recover(signedContent, signature);\\n            require(\\n                recoveredAddress == boltRelayerAddr,\\n                \\\"relay signature invalid\\\"\\n            );\\n        }\\n\\n        {\\n            // store fulfill data\\n            FulfillData memory fdata = FulfillData(swapID, block.number, boltOperator);\\n            fulfills[swapID] = fdata;\\n\\n            // reset relayer's stake lock\\n            bytes32 mapkey = keccak256(\\n                abi.encodePacked(\\n                    getLockAmount(s.crossAmount),\\n                    s.nonce,\\n                    getRouteID(s.route),\\n                    s.srcMsg.tokenOut,\\n                    s.requester,\\n                    boltRelayerAddr,\\n                    swapID,\\n                    LockTypes.SWAP_LOCK\\n                )\\n            );\\n            uint unlockTime = lockedFunds[mapkey];\\n            // check swap not expired\\n            require(block.number < unlockTime, \\\"swap expired\\\");\\n            lockedFunds[mapkey] = block.number + params.lockDuration();\\n        }\\n\\n        {\\n            // - move swap value to locked value in operator & relayer 's locked lists\\n            (uint[] memory fees, uint crossAmount) = getSwapFees(\\n                s.crossAmount + s.totalFees\\n            );\\n            require(\\n                crossAmount == s.crossAmount,\\n                \\\"recomputed crossAmount mismatch\\\"\\n            );\\n            _lockStake(\\n                crossAmount + fees[uint(BoltActors.OPERATOR)],\\n                s.nonce,\\n                getRouteID(s.route),\\n                s.srcMsg.tokenOut,\\n                s.requester,\\n                boltOperator,\\n                swapID,\\n                LockTypes.PENDING_REWARD\\n            );\\n            _lockStake(\\n                fees[uint(BoltActors.RELAYER)],\\n                s.nonce,\\n                getRouteID(s.route),\\n                s.srcMsg.tokenOut,\\n                s.requester,\\n                boltRelayerAddr,\\n                swapID,\\n                LockTypes.PENDING_REWARD\\n            );\\n            _lockStake(\\n                fees[uint(BoltActors.PROTOCOL)],\\n                s.nonce,\\n                getRouteID(s.route),\\n                s.srcMsg.tokenOut,\\n                s.requester,\\n                PROTOCOL_FEE_RECIPIENT,\\n                swapID,\\n                LockTypes.PENDING_REWARD\\n            );\\n        }\\n        s.status = Status.FULFILLED;\\n    }\\n\\n    function slash(SlashRules rule, SwapData calldata s, address boltOperator,\\n        address boltRelayerAddr, bytes calldata signature)\\n        external\\n    {\\n        bytes32 h = computeSwapID(s);\\n        // verify signature\\n        bytes32 signedContent = keccak256(\\n            abi.encodePacked(RELAY_MESSAGE_PREFIX, h, boltOperator)\\n        );\\n        address recoveredAddress = ECDSA.recover(signedContent, signature);\\n        require(\\n            recoveredAddress == boltRelayerAddr,\\n            \\\"slash: relay signature invalid\\\"\\n        );\\n\\n        uint amt;\\n        address token;\\n        if (rule == SlashRules.RULE1) {\\n            (amt, token) = _slashRule1(h, s, boltRelayerAddr);\\n        } else if (rule == SlashRules.RULE2) {\\n            (amt, token) = _slashRule2(h, s, boltOperator, boltRelayerAddr);\\n        } else {\\n            revert(\\\"slash rule invalid\\\");\\n        }\\n\\n        // update stake balances\\n        boltRelayers[boltRelayerAddr].stakesByRoute[getRouteID(s.route)].stakeByToken[token] -= amt;\\n        boltRelayers[boltRelayerAddr].stakesByRoute[getRouteID(s.route)].totalLockedByToken[token] -= amt;\\n\\n        emit Slash(rule, amt, token, boltRelayerAddr, h);\\n\\n        // move funds\\n        // will update\\n        if (token == NATIVE_TOKEN_ADDRESS) {\\n            TransferHelper.safeTransferETH(PROTOCOL_FEE_RECIPIENT, amt);\\n        } else {\\n            TransferHelper.safeTransfer(token, PROTOCOL_FEE_RECIPIENT, amt);\\n        }\\n    }\\n\\n    function _slashRule1(bytes32 swapID, SwapData calldata s, address boltRelayerAddr)\\n        internal returns (uint, address)\\n    {\\n        require(\\n            s.route.dst == CURRENT_NETWORK,\\n            \\\"SR1 fulfill dstNetwork invalid\\\"\\n        );\\n        require(computeSwapID(s) == swapID, \\\"invalid swap hash\\\");\\n        FulfillData memory f = fulfills[swapID];\\n        SwapData memory swapState = swaps[swapID];\\n        require(\\n            swapState.status == Status.INVALID && f.boltOperator == address(0),\\n            \\\"SR1 fulfill exists\\\"\\n        );\\n\\n        // TODO: advance swap status\\n\\n        return (s.crossAmount, s.dstMsg.tokenIn);\\n    }\\n\\n    function _slashRule2(bytes32 swapID, SwapData calldata s, address boltOperator, address boltRelayerAddr)\\n        internal returns (uint, address)\\n    {\\n        require(\\n            s.route.src == CURRENT_NETWORK,\\n            \\\"SR2 fulfill srcNetwork invalid\\\"\\n        );\\n        FulfillData memory f = fulfills[swapID];\\n        require(boltOperator != f.boltOperator, \\\"SR2-OP\\\");\\n\\n        // TODO: advance swap status\\n\\n        return (getLockAmount(s.crossAmount), s.srcMsg.tokenOut);\\n    }\\n}\\n\",\"keccak256\":\"0x8cee7a1a651d7ac311e0dc466caee41c5229cf0001d58425f65fe3da6c0e760d\",\"license\":\"MIT\"},\"contracts/MainStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nabstract contract MainStructs {\\n    enum Networks {\\n        ETH,\\n        PLG,\\n        BSC,\\n        AVAX\\n    }\\n\\n    enum NetworkRoles {\\n        SOURCE,\\n        DESTINATION\\n    }\\n\\n    enum BoltActors {\\n        RELAYER,\\n        PROTOCOL,\\n        OPERATOR,\\n        WATCHER\\n    }\\n\\n    enum SlashRules {\\n        RULE1,\\n        RULE2,\\n        RULE3\\n    }\\n\\n    enum Status {\\n        INVALID,\\n        WAITING,\\n        FULFILLED,\\n        COMPLETED,\\n        REFUNDED\\n    }\\n\\n    enum LockTypes {\\n        SWAP_LOCK,\\n        PENDING_REWARD,\\n        UNSTAKE\\n    }\\n\\n    struct Route {\\n        Networks src;\\n        Networks dst;\\n    }\\n\\n    // TODO: byte marshaling\\n    // TODO: move to executor\\n    struct ExecutableMessage {\\n        // uint routeId;\\n        address tokenIn;\\n        address callAddress;\\n        bytes callData; // includes amount, receiver etc.\\n        address tokenOut;\\n    }\\n\\n    struct SwapData {\\n        uint nonce;\\n        address requester;\\n        address boltRelayerAddr;\\n        Route route;\\n        uint crossAmount;\\n        uint totalFees;\\n        // uint startBlock;\\n        ExecutableMessage srcMsg;\\n        ExecutableMessage dstMsg;\\n        Status status;\\n    }\\n\\n    struct FulfillData {\\n        bytes32 swapID;\\n        uint startBlock;\\n        address boltOperator;\\n    }\\n\\n    struct RelayData {\\n        bytes32 swapID;\\n        address boltOperator;\\n    }\\n\\n    struct LockedFunds {\\n        uint amount;\\n        uint nonce;\\n        uint routeID;\\n        address token;\\n        address depositor;\\n        address receiver;\\n        bytes32 swapID;\\n        // uint until;\\n        // bytes32 h; // the swap ID this is locked for\\n        LockTypes lockType;\\n    }\\n\\n    struct StakedFunds {\\n        mapping(address => uint) stakeByToken;\\n        mapping(address => uint) totalLockedByToken;\\n    }\\n\\n    struct BoltRelayer {\\n        mapping(uint => StakedFunds) stakesByRoute;\\n        uint unstakeEnableBlock;\\n        bytes[] extraAddresses; // placeholder\\n    }\\n}\",\"keccak256\":\"0x0fb8c3d5dfb891a43075912edc3c3a52a2e970bb07e5e22a55054b1164ea5472\",\"license\":\"MIT\"},\"contracts/MainTesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Main.sol\\\";\\n\\ncontract MainTestDst is Main {\\n    constructor(\\n        Networks _net,\\n        address _params,\\n        address _feeRecipient\\n    ) Main(_net, _params, _feeRecipient) {}\\n}\\n\",\"keccak256\":\"0x1ae04128cf0c1a904ce77b45272111201bfe06f7b0a2e20a3815dc78b0173029\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80639814b06e116100ec578063cff0ab961161008a578063f4d914e611610064578063f4d914e614610585578063f991c274146105c6578063fa5f1bce146105e6578063fe9c4c1d1461061457600080fd5b8063cff0ab9614610507578063df2ebdbb1461053b578063eb84e7f21461055057600080fd5b8063b174d87f116100c6578063b174d87f146104a1578063bebc4593146104c1578063c28c5e6a146104d4578063cfbf18bd146104e757600080fd5b80639814b06e14610434578063a1c1af0b14610454578063af16702a1461048157600080fd5b8063733848c71161015957806378de99db1161013357806378de99db146103885780637926a4df146103b857806385f547dd146103cb57806394e8a6b7146103de57600080fd5b8063733848c71461032857806373afef9f14610348578063763728e41461036857600080fd5b80635cb91d8a116101955780635cb91d8a1461022657806360d421be146102535780637034564f146102bc578063730143c6146102dc57600080fd5b80630b65fe7c146101bc5780631ba8c407146101de5780631d4674b514610206575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004614405565b61064b565b005b3480156101ea57600080fd5b506101f361069e565b6040519081526020015b60405180910390f35b34801561021257600080fd5b506101dc610221366004614562565b6106e6565b34801561023257600080fd5b5061024661024136600461467f565b610702565b6040516101fd91906146c0565b34801561025f57600080fd5b5061029861026e36600461470d565b6004602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b0316908201526060016101fd565b3480156102c857600080fd5b506101f36102d7366004614726565b6108b1565b3480156102e857600080fd5b506103107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101fd565b34801561033457600080fd5b506101f361034336600461470d565b610975565b34801561035457600080fd5b506101dc61036336600461467f565b610ab2565b34801561037457600080fd5b506101dc610383366004614405565b610c99565b34801561039457600080fd5b506101f36103a3366004614765565b60006020819052908152604090206001015481565b6101dc6103c63660046147a1565b61121e565b6101dc6103d93660046148b5565b611706565b3480156103ea57600080fd5b506104276040518060400160405280601f81526020017f19426f6c74205369676e656420556e6c6f636b204d6573736167653a0a33320081525081565b6040516101fd91906149d8565b34801561044057600080fd5b506101dc61044f3660046149fe565b611be1565b34801561046057600080fd5b506101f361046f36600461470d565b60056020526000908152604090205481565b34801561048d57600080fd5b5061031061049c36600461470d565b611f43565b3480156104ad57600080fd5b506101dc6104bc366004614aa3565b611f6d565b6101dc6104cf366004614b28565b611f97565b6101dc6104e2366004614baa565b612019565b3480156104f357600080fd5b506101f3610502366004614d8a565b6120e6565b34801561051357600080fd5b506103107f000000000000000000000000000000000000000000000000000000000000000081565b34801561054757600080fd5b50610310600081565b34801561055c57600080fd5b5061057061056b36600461470d565b6121cc565b6040516101fd99989796959493929190614e35565b34801561059157600080fd5b506105b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516101fd9190614ed4565b3480156105d257600080fd5b506101f36105e1366004614ee2565b61242f565b3480156105f257600080fd5b5061060661060136600461470d565b612476565b6040516101fd929190614f39565b34801561062057600080fd5b506104276040518060400160405280601e81526020016000805160206156e383398151915281525081565b600085815260046020908152604091829020825160608101845281548152600182015492810192909252600201546001600160a01b031691810191909152610696818686868661276d565b505050505050565b60006106ba604080518082019091526000808252602082015290565b80516020808301516040516106d0939201614f72565b6040516020818303038152906040525191505090565b6106f7898989898989898989612cf8565b505050505050505050565b6001546060906000906001600160401b0381111561072257610722614484565b60405190808252806020026020018201604052801561074b578160200160208202803683370190505b5090506000805b6001548110156107fe5760006107906001838154811061077457610774614f92565b6000918252602090912001546001600160a01b031689886108b1565b90508681106107eb578382815181106107ab576107ab614f92565b60200260200101518484815181106107c5576107c5614f92565b6001600160a01b0390921660209283029190910190910152826107e781614fbe565b9350505b50806107f681614fbe565b915050610752565b506000816001600160401b0381111561081957610819614484565b604051908082528060200260200182016040528015610842578160200160208202803683370190505b50905060005b828110156108a65783818151811061086257610862614f92565b602002602001015182828151811061087c5761087c614f92565b6001600160a01b03909216602092830291909101909101528061089e81614fbe565b915050610848565b509695505050505050565b6001600160a01b03831660009081526020819052604081208190816108d58661242f565b8152602080820192909252604090810160009081206001600160a01b0387168252600181018452828220549381905291902054909250808211156109605760405162461bcd60e51b815260206004820152601e60248201527f696e76616c6964207374616b652026206c6f636b656420616d6f756e7473000060448201526064015b60405180910390fd5b61096a8282614fd7565b979650505050505050565b604051634220c46760e01b81526001600482015260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634220c46790602401602060405180830381865afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190614fea565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166372cacb706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a899190614fea565b905080610a968382615003565b610aa09086615016565b610aaa919061502d565b949350505050565b336000908152602081905260408120908181610acd8761242f565b8152602080820192909252604090810160009081206001600160a01b0387168252808452828220546001808301909552929091205492850154909350909190431015610b5b5760405162461bcd60e51b815260206004820152601a60248201527f666972737420756e7374616b652074696d65206e6f74206d65740000000000006044820152606401610957565b600082118015610b6a57508082115b610ba55760405162461bcd60e51b815260206004820152600c60248201526b756e7374616b65207a65726f60a01b6044820152606401610957565b610baf8183614fd7565b861115610bf75760405162461bcd60e51b81526020600482015260166024820152751d5b9cdd185ad948195e18d959591cc8185b5bdd5b9d60521b6044820152606401610957565b610c05600280546001019055565b6000610c2987610c1460025490565b610c1d8b61242f565b89600033816002612fe2565b90507f093ade7e251c066e068978f0383c03ea6e40922ea4e3731bb9f7c1ca54fdb6ff33610c568a61242f565b604080516001600160a01b039384168152602081019290925281018a905290881660608201526080810183905260a0015b60405180910390a15050505050505050565b600085815260036020526040812090600e82015460ff166004811115610cc157610cc1614dbe565b14158015610cdb575060028101546001600160a01b031615155b8015610cf3575060018101546001600160a01b031615155b610d335760405162461bcd60e51b81526020600482015260116024820152701cddd85c081b9bdb8b595e1a5cdd195b9d607a1b6044820152606401610957565b60006040518060400160405280601e81526020016000805160206156e38339815191528152508787604051602001610d6d9392919061504f565b6040516020818303038152906040528051906020012090506000610dc78286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061337092505050565b9050856001600160a01b0316816001600160a01b031614610dfa5760405162461bcd60e51b815260040161095790615088565b5050604080516060810182528781524360208083019182526001600160a01b0389811684860190815260008c8152600493849052958620855181559351600185015551600290930180546001600160a01b0319169390911692909217909155830154909190610e6890610975565b83546040805180820190915260038087018054610ee29392839160ff1690811115610e9557610e95614dbe565b6003811115610ea657610ea6614dbe565b81528154602090910190610100900460ff166003811115610ec957610ec9614dbe565b6003811115610eda57610eda614dbe565b90525061242f565b60098601546001870154604051610f13959493926001600160a01b039081169216908c908f906000906020016150cf565b60408051601f19818403018152918152815160209283012060008181526005909352912054909150438111610f795760405162461bcd60e51b815260206004820152600c60248201526b1cddd85c08195e1c1a5c995960a21b6044820152606401610957565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663045544436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190614fea565b6110059043615003565b60009283526005602081905260408420919091558401546004850154929350839261103592506106019190615003565b915091508260040154811461108c5760405162461bcd60e51b815260206004820152601f60248201527f7265636f6d70757465642063726f7373416d6f756e74206d69736d61746368006044820152606401610957565b611104826002815181106110a2576110a2614f92565b6020026020010151826110b59190615003565b845460408051808201909152600380880180546110e29392839160ff1690811115610e9557610e95614dbe565b60098701546001808901546001600160a01b039283169216908d908f90612fe2565b506111758260008151811061111b5761111b614f92565b6020908102919091010151845460408051808201909152600380880180546111539392839160ff1690811115610e9557610e95614dbe565b60098701546001808901546001600160a01b039283169216908c908f90612fe2565b506112068260018151811061118c5761118c614f92565b6020908102919091010151845460408051808201909152600380880180546111c49392839160ff1690811115610e9557610e95614dbe565b60098701546001808901546001600160a01b039283169216907f0000000000000000000000000000000000000000000000000000000000000000908f90612fe2565b505050600e01805460ff191660021790555050505050565b6112266142fb565b60007f0000000000000000000000000000000000000000000000000000000000000000600381111561125a5761125a614dbe565b8551600381111561126d5761126d614dbe565b146112ba5760405162461bcd60e51b815260206004820152601760248201527f73776170207372634e6574776f726b20696e76616c69640000000000000000006044820152606401610957565b6000806112cf896112ca88615139565b613394565b90925090506112e46080870160608801614765565b6001600160a01b0316826001600160a01b0316146113445760405162461bcd60e51b815260206004820152601d60248201527f73776170207372634d736720746f6b656e4f7574206d69736d617463680000006044820152606401610957565b600061135b89896102d760808b0160608c01614765565b905060008061136984612476565b90925090506000805b83518110156113b45783818151811061138d5761138d614f92565b6020026020010151826113a09190615003565b9150806113ac81614fbe565b915050611372565b506113be82610975565b9650868410156114105760405162461bcd60e51b815260206004820181905260248201527f737761703a2072656c6179657220696e73756666696369656e74207374616b656044820152606401610957565b61141e600280546001019055565b60405180610120016040528061143360025490565b8152602001336001600160a01b031681526020018d6001600160a01b031681526020018c81526020018381526020018281526020018b61147290615139565b81526020016114808b615139565b815260200160018152509750505050505050600061149d836120e6565b90506114d38284600001516114b5866060015161242f565b6114c560808a0160608b01614765565b87602001518c876000612fe2565b506000818152600360208181526040928390208651815590860151600180830180546001600160a01b039384166001600160a01b031991821617909155948801516002840180549190931695169490941790556060860151805182840180548996949593949193849260ff199092169190849081111561155557611555614dbe565b021790555060208201518154829061ff00191661010083600381111561157d5761157d614dbe565b021790555050506080820151600482015560a0820151600582015560c082015180516006830180546001600160a01b039283166001600160a01b0319918216178255602084015160078601805491909416911617909155604082015160088401906115e890826151bf565b5060609190910151600390910180546001600160a01b039283166001600160a01b03199182161790915560e08401518051600a850180549185169184169190911781556020820151600b86018054919095169316929092179092556040820151600c84019061165790826151bf565b5060609190910151600390910180546001600160a01b0319166001600160a01b03909216919091179055610100820151600e8201805460ff191660018360048111156116a5576116a5614dbe565b02179055509050507f54d476dc41f2232e6f33d2f643193ee8e47ffb36abe274f3fdaefa1e586f8d0633886116d98961242f565b604080516001600160a01b0394851681529390921660208401529082015260608101839052608001610c87565b8260005b81518110156118d75781818151811061172557611725614f92565b602002602001015160200151600381111561174257611742614dbe565b82828151811061175457611754614f92565b602002602001015160000151600381111561177157611771614dbe565b036117ae5760405162461bcd60e51b815260206004820152600d60248201526c1493d55511481a5b9d985b1a59609a1b6044820152606401610957565b7f000000000000000000000000000000000000000000000000000000000000000060038111156117e0576117e0614dbe565b8282815181106117f2576117f2614f92565b602002602001015160000151600381111561180f5761180f614dbe565b148061187957507f0000000000000000000000000000000000000000000000000000000000000000600381111561184857611848614dbe565b82828151811061185a5761185a614f92565b602002602001015160200151600381111561187757611877614dbe565b145b6118c55760405162461bcd60e51b815260206004820152601e60248201527f726f757465206d75737420636f6e7461696e2063757272656e74206e657400006044820152606401610957565b806118cf81614fbe565b91505061170a565b50336000908152602081905260408120855182906001600160401b0381111561190257611902614484565b60405190808252806020026020018201604052801561192b578160200160208202803683370190505b50905060005b8751811015611a4b5761195c88828151811061194f5761194f614f92565b602002602001015161242f565b82828151811061196e5761196e614f92565b6020908102919091018101919091523360009081529081905260408120835182908590859081106119a1576119a1614f92565b6020026020010151815260200190815260200160002090508782815181106119cb576119cb614f92565b6020026020010151816000016000896001600160a01b03166001600160a01b031681526020019081526020016000206000828254611a099190615003565b92505081905550878281518110611a2257611a22614f92565b602002602001015185611a359190615003565b9450508080611a4390614fbe565b915050611931565b506001600160a01b038516611aae57348314611aa95760405162461bcd60e51b815260206004820152601b60248201527f7374616b65206e617469766520616d6f756e7420696e76616c696400000000006044820152606401610957565b611aba565b611aba853330866134a5565b8160010154600003611b9b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a237bbcf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b489190614fea565b611b529043615003565b600180840191909155805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b031916331790555b7f8e14d51cd728ccd65331d02d5a4c92c78167558cd044ed10ffb28594e3ada00c33828888604051611bd0949392919061527e565b60405180910390a150505050505050565b6000611bef610502876152c7565b905060006040518060400160405280601e81526020016000805160206156e38339815191528152508287604051602001611c2b9392919061504f565b6040516020818303038152906040528051906020012090506000611c858286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061337092505050565b9050856001600160a01b0316816001600160a01b031614611ce85760405162461bcd60e51b815260206004820152601e60248201527f736c6173683a2072656c6179207369676e617475726520696e76616c696400006044820152606401610957565b600080808b6002811115611cfe57611cfe614dbe565b03611d1857611d0e858b8a6135a7565b9092509050611d7a565b60018b6002811115611d2c57611d2c614dbe565b03611d3d57611d0e858b8b8b613a24565b60405162461bcd60e51b81526020600482015260126024820152711cdb185cda081c9d5b19481a5b9d985b1a5960721b6044820152606401610957565b816000808a6001600160a01b03166001600160a01b031681526020019081526020016000206000016000611dbb8d6060018036038101906105e19190614ee2565b81526020019081526020016000206000016000836001600160a01b03166001600160a01b031681526020019081526020016000206000828254611dfe9190614fd7565b92505081905550816000808a6001600160a01b03166001600160a01b031681526020019081526020016000206000016000611e468d6060018036038101906105e19190614ee2565b81526020019081526020016000206001016000836001600160a01b03166001600160a01b031681526020019081526020016000206000828254611e899190614fd7565b90915550506040517f397c9bcf482fa0661b4854d7acc5c2867e3a2a37a5f6aa9dedd27985e7ed1ff490611ec6908d90859085908d908b906152d3565b60405180910390a16001600160a01b038116611f0b57611f067f000000000000000000000000000000000000000000000000000000000000000083613b7b565b611f36565b611f36817f000000000000000000000000000000000000000000000000000000000000000084613c23565b5050505050505050505050565b60018181548110611f5357600080fd5b6000918252602090912001546001600160a01b0316905081565b611f8d888888888888888860405180602001604052806000815250612cf8565b5050505050505050565b600080611fa48787613d23565b60008281526004602090815260408083208451815584830151600182015584820151600290910180546001600160a01b0319166001600160a01b039092169190911790556003909152902091935091508790612000828261552a565b905050612010818787878761276d565b50505050505050565b6000806120268484613d23565b60008281526004602052604090206002810154929450909250906001600160a01b03161561208f5760405162461bcd60e51b815260206004820152601660248201527566756c66696c6c20616c72656164792065786973747360501b6044820152606401610957565b60008381526004602090815260408083208551815585830151600182015585820151600290910180546001600160a01b0319166001600160a01b03909216919091179055600390915290208590612010828261552a565b60008060006120f88460c00151613f2e565b6121058560e00151613f2e565b604080516020810184905290810182905291935091506060016040516020818303038152906040528051906020012091506000846000015185602001518660400151612154886060015161242f565b608089015160a08a01516040805160208101979097526bffffffffffffffffffffffff19606096871b8116918801919091529390941b90921660548501526068840152608883015260a882015260c8810184905260e80160408051601f19818403018152919052805160209091012095945050505050565b6003602081905260009182526040918290208054600182015460028301548551808701909652838501805493966001600160a01b03938416969290931694939091839160ff169081111561222257612222614dbe565b600381111561223357612233614dbe565b81528154602090910190610100900460ff16600381111561225657612256614dbe565b600381111561226757612267614dbe565b90525060048201546005830154604080516080810182526006860180546001600160a01b03908116835260078801541660208301526008870180549697959694959492939192918401916122ba90615145565b80601f01602080910402602001604051908101604052809291908181526020018280546122e690615145565b80156123335780601f1061230857610100808354040283529160200191612333565b820191906000526020600020905b81548152906001019060200180831161231657829003601f168201915b5050509183525050600391909101546001600160a01b0390811660209283015260408051608081018252600a8601805484168252600b87015490931693810193909352600c850180549495949184019161238c90615145565b80601f01602080910402602001604051908101604052809291908181526020018280546123b890615145565b80156124055780601f106123da57610100808354040283529160200191612405565b820191906000526020600020905b8154815290600101906020018083116123e857829003601f168201915b5050509183525050600391909101546001600160a01b0316602090910152600e9091015460ff1689565b60008160200151600381111561244757612447614dbe565b8251600381111561245a5761245a614dbe565b61246690610100615016565b6124709190615003565b92915050565b60606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166372cacb706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fd9190614fea565b9050600061250d60026001615003565b90506000816001600160401b0381111561252957612529614484565b604051908082528060200260200182016040528015612552578160200160208202803683370190505b5090508560005b83811015612760576040516342e3142b60e11b81526004810182905260009086906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906385c6285690602401602060405180830381865afa1580156125cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ef9190614fea565b6125f9908b615016565b612603919061502d565b604051633ee5a89b60e21b8152600481018490529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fb96a26c90602401602060405180830381865afa15801561266b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268f9190614fea565b81101561272257604051633ee5a89b60e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fb96a26c90602401602060405180830381865afa1580156126fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271f9190614fea565b90505b8084838151811061273557612735614f92565b602090810291909101015261274a8184614fd7565b925050808061275890614fbe565b915050612559565b5090969095509350505050565b845160009081526003602081815260408084208151610120810183528154815260018201546001600160a01b03908116948201949094526002820154909316838301528151808301909252808401805493949193606086019392839160ff16908111156127dc576127dc614dbe565b60038111156127ed576127ed614dbe565b81528154602090910190610100900460ff16600381111561281057612810614dbe565b600381111561282157612821614dbe565b90525081526004820154602080830191909152600583015460408084019190915280516080810182526006850180546001600160a01b0390811683526007870154169382019390935260088501805460609095019491939284019161288590615145565b80601f01602080910402602001604051908101604052809291908181526020018280546128b190615145565b80156128fe5780601f106128d3576101008083540402835291602001916128fe565b820191906000526020600020905b8154815290600101906020018083116128e157829003601f168201915b5050509183525050600391909101546001600160a01b0390811660209283015291835260408051608081018252600a8601805485168252600b87015490941681840152600c860180549590930194909392918401919061295d90615145565b80601f016020809104026020016040519081016040528092919081815260200182805461298990615145565b80156129d65780601f106129ab576101008083540402835291602001916129d6565b820191906000526020600020905b8154815290600101906020018083116129b957829003601f168201915b5050509183525050600391909101546001600160a01b0316602091820152908252600e83015491019060ff166004811115612a1357612a13614dbe565b6004811115612a2457612a24614dbe565b905250905060008161010001516004811115612a4257612a42614dbe565b14158015612a5c575060408601516001600160a01b031615155b612a9f5760405162461bcd60e51b8152602060048201526014602482015273199d5b199a5b1b081b9bdb8b595e1a5cdd195b9d60621b6044820152606401610957565b846001600160a01b031686604001516001600160a01b031614612b045760405162461bcd60e51b815260206004820152601b60248201527f72656c6179206f70657261746f7241646472206d69736d6174636800000000006044820152606401610957565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663045544436040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b869190614fea565b8660200151612b959190615003565b4310612bd55760405162461bcd60e51b815260206004820152600f60248201526e199d5b199a5b1b08195e1c1a5c9959608a1b6044820152606401610957565b60006040518060400160405280601e81526020016000805160206156e3833981519152815250876000015187604051602001612c139392919061504f565b6040516020818303038152906040528051906020012090506000612c6d8286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061337092505050565b9050856001600160a01b0316816001600160a01b031614612ca05760405162461bcd60e51b815260040161095790615088565b60e08301516080840151612cb49082613f74565b5050612cec612cc68560800151610975565b85516060870151612cd69061242f565b60e08801515160408e01518e518d906000612fe2565b50505050505050505050565b60008989898989898989604051602001612d199897969594939291906150cf565b60408051601f198184030181529181528151602092830120600081815260059093529120549091508a15801590612d505750600081115b612d8e5760405162461bcd60e51b815260206004820152600f60248201526e6e6f206c6f636b65642066756e647360881b6044820152606401610957565b6001600160a01b03871615801590612da7575060008351115b15612e545760006040518060400160405280601f81526020017f19426f6c74205369676e656420556e6c6f636b204d6573736167653a0a33320081525086604051602001612df69291906155ce565b6040516020818303038152906040528051906020012090506000612e1a8286613370565b9050886001600160a01b0316816001600160a01b031614612e4d5760405162461bcd60e51b815260040161095790615088565b5050612e9a565b80431015612e9a5760405162461bcd60e51b81526020600482015260136024820152721d5b9b1bd8dac81d1a5b59481b9bdd081b595d606a1b6044820152606401610957565b6000828152600560205260408120556002846002811115612ebd57612ebd614dbe565b1480612eda57506000846002811115612ed857612ed8614dbe565b145b15612f02576001600160a01b038816612ef757611f06868c613b7b565b611f0688878d613c23565b6000846002811115612f1657612f16614dbe565b03611f36576001600160a01b038087166000908152602081815260408083208d84528252808320938c1683526001909301905220548b8111612f9a5760405162461bcd60e51b815260206004820152601b60248201527f696e76616c696420746f74616c206c6f636b656420616d6f756e7400000000006044820152606401610957565b612fa48c82614fd7565b6001600160a01b038089166000908152602081815260408083208f84528252808320938e168352600190930190522055505050505050505050505050565b60006002826002811115612ff857612ff8614dbe565b03613090577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663179759386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561305b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307f9190614fea565b6130899043615003565b90506132d5565b60008260028111156130a4576130a4614dbe565b03613216577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663045544436040518163ffffffff1660e01b8152600401602060405180830381865afa158015613107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312b9190614fea565b6131359043615003565b6001600160a01b038086166000908152602081815260408083208c84528252808320938b168352600184019091528120549293509091613176908c90615003565b6001600160a01b038088166000908152602081815260408083208e84528252808320938d16835292905220549091508111156131f45760405162461bcd60e51b815260206004820152601960248201527f6c6f636b2065786365656473207374616b6520616d6f756e74000000000000006044820152606401610957565b6001600160a01b038816600090815260019092016020526040909120556132d5565b600182600281111561322a5761322a614dbe565b0361328d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663045544436040518163ffffffff1660e01b8152600401602060405180830381865afa15801561305b573d6000803e3d6000fd5b60405162461bcd60e51b815260206004820152601760248201527f696e76616c6964207374616b65206c6f636b20747970650000000000000000006044820152606401610957565b600089898989898989896040516020016132f69897969594939291906150cf565b60408051601f1981840301815282825280516020918201206000818152600590925291902084905591507f8f60b5ae335a9ad0b3a0b87a0fdec8a5778210973a446f0ec3949f4e1353cfa39061335b9085908d908d908d908d908d908d908d906155f0565b60405180910390a15098975050505050505050565b600080600061337f8585614016565b9150915061338c81614058565b509392505050565b6000808260400151516000036134985782606001516001600160a01b031683600001516001600160a01b03161480156133d8575060208301516001600160a01b0316155b61341d5760405162461bcd60e51b81526020600482015260166024820152751cdc98d35cd9c80a189b185b9aca481a5b9d985b1a5960521b6044820152606401610957565b82516001600160a01b03166134805734841461347b5760405162461bcd60e51b815260206004820152601a60248201527f73776170206e617469766520616d6f756e7420696e76616c69640000000000006044820152606401610957565b61348e565b825161348e903330876134a5565b505080518261349e565b50508051825b9250929050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691613509919061563f565b6000604051808303816000865af19150503d8060008114613546576040519150601f19603f3d011682016040523d82523d6000602084013e61354b565b606091505b50915091508180156135755750805115806135755750808060200190518101906135759190615651565b6106965760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606401610957565b6000807f000000000000000000000000000000000000000000000000000000000000000060038111156135dc576135dc614dbe565b6135ec60a0860160808701615673565b60038111156135fd576135fd614dbe565b1461364a5760405162461bcd60e51b815260206004820152601e60248201527f5352312066756c66696c6c206473744e6574776f726b20696e76616c696400006044820152606401610957565b84613657610502866152c7565b146136985760405162461bcd60e51b81526020600482015260116024820152700d2dcecc2d8d2c840e6eec2e040d0c2e6d607b1b6044820152606401610957565b600085815260046020908152604080832081516060808201845282548252600180840154838701526002938401546001600160a01b03908116848701528c88526003808852868920875161012081018952815481529381015483169884019890985294870154168186015284518086019095528584018054939796919591949286019391929091839160ff9091169081111561373657613736614dbe565b600381111561374757613747614dbe565b81528154602090910190610100900460ff16600381111561376a5761376a614dbe565b600381111561377b5761377b614dbe565b90525081526004820154602080830191909152600583015460408084019190915280516080810182526006850180546001600160a01b039081168352600787015416938201939093526008850180546060909501949193928401916137df90615145565b80601f016020809104026020016040519081016040528092919081815260200182805461380b90615145565b80156138585780601f1061382d57610100808354040283529160200191613858565b820191906000526020600020905b81548152906001019060200180831161383b57829003601f168201915b5050509183525050600391909101546001600160a01b0390811660209283015291835260408051608081018252600a8601805485168252600b87015490941681840152600c86018054959093019490939291840191906138b790615145565b80601f01602080910402602001604051908101604052809291908181526020018280546138e390615145565b80156139305780601f1061390557610100808354040283529160200191613930565b820191906000526020600020905b81548152906001019060200180831161391357829003601f168201915b5050509183525050600391909101546001600160a01b0316602091820152908252600e83015491019060ff16600481111561396d5761396d614dbe565b600481111561397e5761397e614dbe565b90525090506000816101000151600481111561399c5761399c614dbe565b1480156139b4575060408201516001600160a01b0316155b6139f55760405162461bcd60e51b81526020600482015260126024820152715352312066756c66696c6c2065786973747360701b6044820152606401610957565b60a0860135613a0861010088018861539c565b613a16906020810190614765565b935093505050935093915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006003811115613a5957613a59614dbe565b613a696080870160608801615673565b6003811115613a7a57613a7a614dbe565b14613ac75760405162461bcd60e51b815260206004820152601e60248201527f5352322066756c66696c6c207372634e6574776f726b20696e76616c696400006044820152606401610957565b600086815260046020908152604091829020825160608101845281548152600182015492810192909252600201546001600160a01b03908116928201839052909190861603613b415760405162461bcd60e51b815260206004820152600660248201526505352322d4f560d41b6044820152606401610957565b613b4e8660a00135610975565b613b5b60e088018861539c565b613b6c906080810190606001614765565b92509250505b94509492505050565b604080516000808252602082019092526001600160a01b038416908390604051613ba5919061563f565b60006040518083038185875af1925050503d8060008114613be2576040519150601f19603f3d011682016040523d82523d6000602084013e613be7565b606091505b5050905080613c1e5760405162461bcd60e51b815260206004820152600360248201526253544560e81b6044820152606401610957565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691613c7f919061563f565b6000604051808303816000865af19150503d8060008114613cbc576040519150601f19603f3d011682016040523d82523d6000602084013e613cc1565b606091505b5091509150818015613ceb575080511580613ceb575080806020019051810190613ceb9190615651565b613d1c5760405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606401610957565b5050505050565b604080516060810182526000808252602082018190529181018290526000613d4d610502866152c7565b905060006040518060600160405280838152602001438152602001866001600160a01b031681525090507f00000000000000000000000000000000000000000000000000000000000000006003811115613da957613da9614dbe565b613db960a0880160808901615673565b6003811115613dca57613dca614dbe565b14613e175760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c206473744e6574776f726b20696e76616c69640000000000006044820152606401610957565b60a08601356000613e2c61010089018961539c565b613e3a906020810190614765565b90506001600160a01b038116613e9e57348214613e995760405162461bcd60e51b815260206004820152601d60248201527f66756c66696c6c206e617469766520616d6f756e7420696e76616c69640000006044820152606401610957565b613eaa565b613eaa813330856134a5565b7feff42e67c228ef263317150105f073e57d2f83634ba8733596e920cc441f7b2687613edc60608b0160408c01614765565b613ef16105e1368d90038d0160608e01614ee2565b604080516001600160a01b039485168152939092166020840152908201526060810186905260800160405180910390a15091969095509350505050565b60008160000151826060015183602001518460400151604051602001613f579493929190615690565b604051602081830303815290604052805190602001209050919050565b6000808260400151516000036134985782606001516001600160a01b031683600001516001600160a01b031614613fe65760405162461bcd60e51b8152602060048201526016602482015275191cdd135cd9c80a189b185b9aca481a5b9d985b1a5960521b6044820152606401610957565b82516001600160a01b03166140035761347b836020015185613b7b565b61348e8360000151846020015186613c23565b600080825160410361404c5760208301516040840151606085015160001a61404087828585614211565b9450945050505061349e565b5060009050600261349e565b600081600481111561406c5761406c614dbe565b036140745750565b600181600481111561408857614088614dbe565b036140d55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610957565b60028160048111156140e9576140e9614dbe565b036141365760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610957565b600381600481111561414a5761414a614dbe565b036141a25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610957565b60048160048111156141b6576141b6614dbe565b0361420e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610957565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156142485750600090506003613b72565b8460ff16601b1415801561426057508460ff16601c14155b156142715750600090506004613b72565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156142c5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166142ee57600060019250925050613b72565b9660009650945050505050565b60408051610120810182526000808252602080830182905282840182905283518085019094528184528301529060608201908152602001600081526020016000815260200161436b6040805160808101825260008082526020820181905260609282018390529181019190915290565b8152604080516080810182526000808252602082810182905260609383018490529282015291019081526020016000905290565b6001600160a01b038116811461420e57600080fd5b80356143bf8161439f565b919050565b60008083601f8401126143d657600080fd5b5081356001600160401b038111156143ed57600080fd5b60208301915083602082850101111561349e57600080fd5b60008060008060006080868803121561441d57600080fd5b85359450602086013561442f8161439f565b9350604086013561443f8161439f565b925060608601356001600160401b0381111561445a57600080fd5b614466888289016143c4565b969995985093965092949392505050565b6003811061420e57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b03811182821017156144bd576144bd614484565b60405290565b604051601f8201601f191681016001600160401b03811182821017156144eb576144eb614484565b604052919050565b600082601f83011261450457600080fd5b81356001600160401b0381111561451d5761451d614484565b614530601f8201601f19166020016144c3565b81815284602083860101111561454557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060008060006101208a8c03121561458157600080fd5b8935985060208a0135975060408a0135965060608a01356145a18161439f565b955060808a01356145b18161439f565b945060a08a01356145c18161439f565b935060c08a0135925060e08a01356145d881614477565b91506101008a01356001600160401b038111156145f457600080fd5b6146008c828d016144f3565b9150509295985092959850929598565b6004811061420e57600080fd5b60006040828403121561462f57600080fd5b604051604081018181106001600160401b038211171561465157614651614484565b604052905080823561466281614610565b8152602083013561467281614610565b6020919091015292915050565b60008060006080848603121561469457600080fd5b61469e858561461d565b92506040840135915060608401356146b58161439f565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156147015783516001600160a01b0316835292840192918401916001016146dc565b50909695505050505050565b60006020828403121561471f57600080fd5b5035919050565b60008060006080848603121561473b57600080fd5b83356147468161439f565b9250614755856020860161461d565b915060608401356146b58161439f565b60006020828403121561477757600080fd5b81356147828161439f565b9392505050565b60006080828403121561479b57600080fd5b50919050565b600080600080600060c086880312156147b957600080fd5b8535945060208601356147cb8161439f565b93506147da876040880161461d565b925060808601356001600160401b03808211156147f657600080fd5b61480289838a01614789565b935060a088013591508082111561481857600080fd5b5061482588828901614789565b9150509295509295909350565b60006001600160401b0382111561484b5761484b614484565b5060051b60200190565b600082601f83011261486657600080fd5b8135602061487b61487683614832565b6144c3565b82815260059290921b8401810191818101908684111561489a57600080fd5b8286015b848110156108a6578035835291830191830161489e565b6000806000606084860312156148ca57600080fd5b83356001600160401b03808211156148e157600080fd5b818601915086601f8301126148f557600080fd5b8135602061490561487683614832565b82815260069290921b8401810191818101908a84111561492457600080fd5b948201945b8386101561494d5761493b8b8761461d565b82528282019150604086019550614929565b9750508701359250508082111561496357600080fd5b5061497086828701614855565b92505061497f604085016143b4565b90509250925092565b60005b838110156149a357818101518382015260200161498b565b50506000910152565b600081518084526149c4816020860160208601614988565b601f01601f19169290920160200192915050565b60208152600061478260208301846149ac565b6000610140828403121561479b57600080fd5b60008060008060008060a08789031215614a1757600080fd5b8635614a2281614477565b955060208701356001600160401b0380821115614a3e57600080fd5b614a4a8a838b016149eb565b965060408901359150614a5c8261439f565b909450606088013590614a6e8261439f565b90935060808801359080821115614a8457600080fd5b50614a9189828a016143c4565b979a9699509497509295939492505050565b600080600080600080600080610100898b031215614ac057600080fd5b8835975060208901359650604089013595506060890135614ae08161439f565b94506080890135614af08161439f565b935060a0890135614b008161439f565b925060c0890135915060e0890135614b1781614477565b809150509295985092959890939650565b600080600080600060808688031215614b4057600080fd5b85356001600160401b0380821115614b5757600080fd5b614b6389838a016149eb565b965060208801359150614b758261439f565b909450604087013590614b878261439f565b90935060608701359080821115614b9d57600080fd5b50614466888289016143c4565b60008060408385031215614bbd57600080fd5b82356001600160401b03811115614bd357600080fd5b614bdf858286016149eb565b9250506020830135614bf08161439f565b809150509250929050565b600060808284031215614c0d57600080fd5b604051608081016001600160401b038282108183111715614c3057614c30614484565b8160405282935084359150614c448261439f565b908252602084013590614c568261439f565b8160208401526040850135915080821115614c7057600080fd5b50614c7d858286016144f3565b6040830152506060830135614c918161439f565b6060919091015292915050565b6005811061420e57600080fd5b80356143bf81614c9e565b60006101408284031215614cc957600080fd5b614cd161449a565b905081358152614ce3602083016143b4565b6020820152614cf4604083016143b4565b6040820152614d06836060840161461d565b606082015260a0820135608082015260c082013560a082015260e08201356001600160401b0380821115614d3957600080fd5b614d4585838601614bfb565b60c084015261010091508184013581811115614d6057600080fd5b614d6c86828701614bfb565b60e08501525050614d806101208401614cab565b9082015292915050565b600060208284031215614d9c57600080fd5b81356001600160401b03811115614db257600080fd5b610aaa84828501614cb6565b634e487b7160e01b600052602160045260246000fd5b60048110614de457614de4614dbe565b9052565b600060018060a01b03808351168452806020840151166020850152604083015160806040860152614e1c60808601826149ac565b9050816060850151166060860152809250505092915050565b8981526001600160a01b03898116602083015288166040820152865160009061014090614e66906060850190614dd4565b6020890151614e786080850182614dd4565b508760a08401528660c08401528060e0840152614e9781840187614de8565b9050828103610100840152614eac8186614de8565b91505060058310614ebf57614ebf614dbe565b826101208301529a9950505050505050505050565b602081016124708284614dd4565b600060408284031215614ef457600080fd5b614782838361461d565b600081518084526020808501945080840160005b83811015614f2e57815187529582019590820190600101614f12565b509495945050505050565b604081526000614f4c6040830185614efe565b90508260208301529392505050565b60048110614f6b57614f6b614dbe565b60f81b9052565b614f7c8184614f5b565b614f896001820183614f5b565b60020192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614fd057614fd0614fa8565b5060010190565b8181038181111561247057612470614fa8565b600060208284031215614ffc57600080fd5b5051919050565b8082018082111561247057612470614fa8565b808202811582820484141761247057612470614fa8565b60008261504a57634e487b7160e01b600052601260045260246000fd5b500490565b60008451615061818460208901614988565b919091019283525060601b6bffffffffffffffffffffffff19166020820152603401919050565b60208082526017908201527f72656c6179207369676e617475726520696e76616c6964000000000000000000604082015260600190565b6003811061420e5761420e614dbe565b88815287602082015286604082015260006bffffffffffffffffffffffff19808860601b166060840152808760601b166074840152808660601b1660888401525083609c83015261511f836150bf565b5060f89190911b60bc82015260bd01979650505050505050565b60006124703683614bfb565b600181811c9082168061515957607f821691505b60208210810361479b57634e487b7160e01b600052602260045260246000fd5b601f821115613c1e57600081815260208120601f850160051c810160208610156151a05750805b601f850160051c820191505b81811015610696578281556001016151ac565b81516001600160401b038111156151d8576151d8614484565b6151ec816151e68454615145565b84615179565b602080601f83116001811461522157600084156152095750858301515b600019600386901b1c1916600185901b178555610696565b600085815260208120601f198616915b8281101561525057888601518255948401946001909101908401615231565b508582101561526e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018060a01b038087168352608060208401526152a06080840187614efe565b83810360408501526152b28187614efe565b92505080841660608401525095945050505050565b60006124703683614cb6565b60a081016152e0876150bf565b95815260208101949094526001600160a01b0392831660408501529116606083015260809091015290565b600081356124708161439f565b80546001600160a01b0319166001600160a01b0392909216919091179055565b813561534381614610565b6004811061535357615353614dbe565b815460ff821691508160ff198216178355602084013561537281614610565b6004811061538257615382614dbe565b61ff008160081b168361ffff198416171784555050505050565b60008235607e198336030181126153b257600080fd5b9190910192915050565b81356153c78161439f565b6153d18183615318565b5060016020808401356153e38161439f565b6153ef81848601615318565b50600283016040850135601e1986360301811261540b57600080fd5b850180356001600160401b0381111561542357600080fd5b803603848301131561543457600080fd5b615448816154428554615145565b85615179565b6000601f82116001811461547e576000831561546657508382018601355b600019600385901b1c1916600184901b1785556154d7565b600085815260209020601f19841690835b828110156154ae5786850189013582559388019390890190880161548f565b50848210156154cd5760001960f88660031b161c198885880101351681555b50508683881b0185555b505050505050506154f66154ed6060840161530b565b60038301615318565b5050565b6000813561247081614c9e565b6005821061551757615517614dbe565b60ff1981541660ff831681178255505050565b8135815561554661553d6020840161530b565b60018301615318565b61555e6155556040840161530b565b60028301615318565b61556e6060830160038301615338565b60a0820135600482015560c0820135600582015561559b61559260e084018461539c565b600683016153bc565b6155b56155ac61010084018461539c565b600a83016153bc565b6154f66155c561012084016154fa565b600e8301615507565b600083516155e0818460208801614988565b9190910191825250602001919050565b61010081016155fe8a6150bf565b9881526020810197909752604087019590955260608601939093526001600160a01b039182166080860152811660a08501521660c083015260e09091015290565b600082516153b2818460208701614988565b60006020828403121561566357600080fd5b8151801515811461478257600080fd5b60006020828403121561568557600080fd5b813561478281614610565b60006bffffffffffffffffffffffff19808760601b168352808660601b166014840152808560601b1660288401525082516156d281603c850160208701614988565b91909101603c019594505050505056fe19426f6c74205369676e65642052656c6179204d6573736167653a0a36340000a2646970667358221220bd3ee12594a9afbc4e1eabcea6a01a15f2308ad91ed42c27af325e86c5b08b6d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "stake((uint8,uint8)[],uint256[],address)": {
        "params": {
          "amounts": "The amount to stake for each route",
          "routes": "Routes to stake funds to e.g. [(ETH, PLG), (ETH, AVAX)]",
          "token": "The token to stake (zero for native coin)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "stake((uint8,uint8)[],uint256[],address)": {
        "notice": "Any relayer can add stake to take swap requests & earn fees;the stake is bound to one route, which consist of source & destination networks (stake amounts must be identical)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1829,
        "contract": "contracts/MainTesting.sol:MainTestDst",
        "label": "boltRelayers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(BoltRelayer)4422_storage)"
      },
      {
        "astId": 1832,
        "contract": "contracts/MainTesting.sol:MainTestDst",
        "label": "boltRelayerAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1835,
        "contract": "contracts/MainTesting.sol:MainTestDst",
        "label": "swapCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)716_storage"
      },
      {
        "astId": 1840,
        "contract": "contracts/MainTesting.sol:MainTestDst",
        "label": "swaps",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(SwapData)4372_storage)"
      },
      {
        "astId": 1845,
        "contract": "contracts/MainTesting.sol:MainTestDst",
        "label": "fulfills",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(FulfillData)4379_storage)"
      },
      {
        "astId": 1849,
        "contract": "contracts/MainTesting.sol:MainTestDst",
        "label": "lockedFunds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Networks)4311": {
        "encoding": "inplace",
        "label": "enum MainStructs.Networks",
        "numberOfBytes": "1"
      },
      "t_enum(Status)4329": {
        "encoding": "inplace",
        "label": "enum MainStructs.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(BoltRelayer)4422_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MainStructs.BoltRelayer)",
        "numberOfBytes": "32",
        "value": "t_struct(BoltRelayer)4422_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(FulfillData)4379_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MainStructs.FulfillData)",
        "numberOfBytes": "32",
        "value": "t_struct(FulfillData)4379_storage"
      },
      "t_mapping(t_bytes32,t_struct(SwapData)4372_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MainStructs.SwapData)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapData)4372_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(StakedFunds)4411_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MainStructs.StakedFunds)",
        "numberOfBytes": "32",
        "value": "t_struct(StakedFunds)4411_storage"
      },
      "t_struct(BoltRelayer)4422_storage": {
        "encoding": "inplace",
        "label": "struct MainStructs.BoltRelayer",
        "members": [
          {
            "astId": 4416,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "stakesByRoute",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(StakedFunds)4411_storage)"
          },
          {
            "astId": 4418,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "unstakeEnableBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4421,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "extraAddresses",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Counter)716_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 715,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ExecutableMessage)4349_storage": {
        "encoding": "inplace",
        "label": "struct MainStructs.ExecutableMessage",
        "members": [
          {
            "astId": 4342,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "tokenIn",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4344,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "callAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4346,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "callData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 4348,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "tokenOut",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(FulfillData)4379_storage": {
        "encoding": "inplace",
        "label": "struct MainStructs.FulfillData",
        "members": [
          {
            "astId": 4374,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "swapID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4376,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "startBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4378,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "boltOperator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Route)4340_storage": {
        "encoding": "inplace",
        "label": "struct MainStructs.Route",
        "members": [
          {
            "astId": 4336,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "src",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Networks)4311"
          },
          {
            "astId": 4339,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "dst",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Networks)4311"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakedFunds)4411_storage": {
        "encoding": "inplace",
        "label": "struct MainStructs.StakedFunds",
        "members": [
          {
            "astId": 4406,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "stakeByToken",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4410,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "totalLockedByToken",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SwapData)4372_storage": {
        "encoding": "inplace",
        "label": "struct MainStructs.SwapData",
        "members": [
          {
            "astId": 4351,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4353,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "requester",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4355,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "boltRelayerAddr",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4358,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "route",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Route)4340_storage"
          },
          {
            "astId": 4360,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "crossAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4362,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "totalFees",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4365,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "srcMsg",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(ExecutableMessage)4349_storage"
          },
          {
            "astId": 4368,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "dstMsg",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(ExecutableMessage)4349_storage"
          },
          {
            "astId": 4371,
            "contract": "contracts/MainTesting.sol:MainTestDst",
            "label": "status",
            "offset": 0,
            "slot": "14",
            "type": "t_enum(Status)4329"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}